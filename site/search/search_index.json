{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Basics to strtree strtree is a Python package for strings binary classification, based on regular expressions put in a decision tree. Github repo: stretree With strtree you can: Do a binary classification of your strings using automatically extracted regular expressions Find shortest regular expressions which covers strings with positive labels in the most accurate way Look at a quick example. Example Firstly, let's build a tree from strings and their labels. import strtree strings = ['Samsung X-500', 'Samsung SM-10', 'Samsung X-1100', 'Samsung F-10', 'Samsung X-2200', 'AB Nokia 1', 'DG Nokia 2', 'THGF Nokia 3', 'SFSD Nokia 4', 'Nokia XG', 'Nokia YO'] labels = [1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0] tree = StringTree() tree.build(strings, labels, min_precision=0.75, min_token_length=1) Let's see what regular expressions were extracted. for leaf in tree.leaves: print(leaf) # Output: # PatternNode(\".+ .+a.+\", right=None, left=PatternNode(.+0.+), n_strings=11, precision=1.0, recall=0.57) # PatternNode(\".+0.+\", right=None, left=None, n_strings=7, precision=1.0, recall=1.0) You may need to check the precision and recall of the whole tree for a given set of strings and true labels. print('Precision: {}'.format(tree.precision_score(strings, labels))) # Precision: 1.0 print('Recall: {}'.format(tree.precision_score(strings, labels))) # Recall: 1.0 Finally, you can pass any strings you want and see if they match to extracted regular expressions or not. matches = tree.match(other_strings) # You will receive a vector of the same size as other_strings containing 0's (no match) or 1's (match) Installing Use PyPI: pip install strtree Use a distribution file located in the dist folder: pip install strtree-0.1.0-py3-none-any.whl Contribution You are very welcome to participate in the project. You may solve the current issues or add new functionality - it is up to you to.","title":"Overview"},{"location":"#basics-to-strtree","text":"strtree is a Python package for strings binary classification, based on regular expressions put in a decision tree. Github repo: stretree With strtree you can: Do a binary classification of your strings using automatically extracted regular expressions Find shortest regular expressions which covers strings with positive labels in the most accurate way Look at a quick example.","title":"Basics to strtree"},{"location":"#example","text":"Firstly, let's build a tree from strings and their labels. import strtree strings = ['Samsung X-500', 'Samsung SM-10', 'Samsung X-1100', 'Samsung F-10', 'Samsung X-2200', 'AB Nokia 1', 'DG Nokia 2', 'THGF Nokia 3', 'SFSD Nokia 4', 'Nokia XG', 'Nokia YO'] labels = [1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0] tree = StringTree() tree.build(strings, labels, min_precision=0.75, min_token_length=1) Let's see what regular expressions were extracted. for leaf in tree.leaves: print(leaf) # Output: # PatternNode(\".+ .+a.+\", right=None, left=PatternNode(.+0.+), n_strings=11, precision=1.0, recall=0.57) # PatternNode(\".+0.+\", right=None, left=None, n_strings=7, precision=1.0, recall=1.0) You may need to check the precision and recall of the whole tree for a given set of strings and true labels. print('Precision: {}'.format(tree.precision_score(strings, labels))) # Precision: 1.0 print('Recall: {}'.format(tree.precision_score(strings, labels))) # Recall: 1.0 Finally, you can pass any strings you want and see if they match to extracted regular expressions or not. matches = tree.match(other_strings) # You will receive a vector of the same size as other_strings containing 0's (no match) or 1's (match)","title":"Example"},{"location":"#installing","text":"Use PyPI: pip install strtree Use a distribution file located in the dist folder: pip install strtree-0.1.0-py3-none-any.whl","title":"Installing"},{"location":"#contribution","text":"You are very welcome to participate in the project. You may solve the current issues or add new functionality - it is up to you to.","title":"Contribution"},{"location":"pattern_reference/","text":"Pattern Pattern ( pattern ) Class for representing a pattern (a regular expression). Initialize a Pattern. Parameters: pattern ( str | Pattern ) \u2013 Str or Pattern object representing a regular expressions. It must be compatible with re.compile method. filter filter ( strings , labels = None ) Return strings and labels which match the pattern and which don't. Parameters: strings ( list [ str ] ) \u2013 Strings to filter. labels ( list [ int ] , default: None ) \u2013 Labels of strings. Returns: matched_strings \u2013 Strings which match the pattern. labels_of_matched \u2013 Labels of strings which match the pattern. If no labels provided, an empty list. not_matched_strings \u2013 Strings which don't match the pattern. labels_of_not_matched \u2013 Labels of strings which don't match the pattern. If no labels provided, an empty list. match match ( string ) Verify if the pattern matches the string. scores scores ( strings , labels ) Calculate classification quality scores for pattern's matches and the labels. Pattern's matches are considered as \"predictions\" when calculating quality metrics. Parameters: strings ( list [ str ] ) \u2013 A list of strings. labels ( list [ int ] ) \u2013 A list of strings labels consisting of 0 and 1. Returns: response ( dict ) \u2013 Contains keys: 'n_strings', 'total_positive', 'n_matches', 'precision', 'recall' and 'accuracy'.","title":"Pattern"},{"location":"pattern_reference/#utils.Pattern","text":"Pattern ( pattern ) Class for representing a pattern (a regular expression). Initialize a Pattern. Parameters: pattern ( str | Pattern ) \u2013 Str or Pattern object representing a regular expressions. It must be compatible with re.compile method.","title":"Pattern"},{"location":"pattern_reference/#utils.Pattern.filter","text":"filter ( strings , labels = None ) Return strings and labels which match the pattern and which don't. Parameters: strings ( list [ str ] ) \u2013 Strings to filter. labels ( list [ int ] , default: None ) \u2013 Labels of strings. Returns: matched_strings \u2013 Strings which match the pattern. labels_of_matched \u2013 Labels of strings which match the pattern. If no labels provided, an empty list. not_matched_strings \u2013 Strings which don't match the pattern. labels_of_not_matched \u2013 Labels of strings which don't match the pattern. If no labels provided, an empty list.","title":"filter"},{"location":"pattern_reference/#utils.Pattern.match","text":"match ( string ) Verify if the pattern matches the string.","title":"match"},{"location":"pattern_reference/#utils.Pattern.scores","text":"scores ( strings , labels ) Calculate classification quality scores for pattern's matches and the labels. Pattern's matches are considered as \"predictions\" when calculating quality metrics. Parameters: strings ( list [ str ] ) \u2013 A list of strings. labels ( list [ int ] ) \u2013 A list of strings labels consisting of 0 and 1. Returns: response ( dict ) \u2013 Contains keys: 'n_strings', 'total_positive', 'n_matches', 'precision', 'recall' and 'accuracy'.","title":"scores"},{"location":"patternnode_reference/","text":"PatternNode PatternNode ( pattern : Pattern ) Class representing a node in a StringTree. Attributes: right ( PatternNode ) \u2013 Node with matching strings. left ( PatternNode ) \u2013 Node with non-matching strings. pattern ( Pattern ) \u2013 Attributed Pattern object. matches \u2013 Strings which match a Pattern object attributed to the PatternNode. strings \u2013 All strings attributed to the PatternNode. labels \u2013 Labels of all strings attributed to the PatternNode. scores \u2013 Scores of an attributed pattern applied to the attributed strings. Initialize a PatternNode. Parameters: pattern ( Pattern ) \u2013 A Pattern object attributed to a node. get_labels get_labels () Get PatternNode.labels attribute get_matches get_matches () Get PatternNode.matches attribute get_pattern get_pattern () Get PatternNode.pattern attribute get_scores get_scores () Get PatternNode.scores attribute get_strings get_strings () Get PatternNode.strings attribute set_labels set_labels ( labels ) Set PatternNode.labels attribute set_matches set_matches ( matches ) Set PatternNode.matches attribute set_pattern set_pattern ( pattern ) Set PatternNode.pattern attribute set_scores set_scores ( scores ) Set PatternNode.scores attribute set_strings set_strings ( strings ) Set PatternNode.strings attribute","title":"PatternNode"},{"location":"patternnode_reference/#utils.PatternNode","text":"PatternNode ( pattern : Pattern ) Class representing a node in a StringTree. Attributes: right ( PatternNode ) \u2013 Node with matching strings. left ( PatternNode ) \u2013 Node with non-matching strings. pattern ( Pattern ) \u2013 Attributed Pattern object. matches \u2013 Strings which match a Pattern object attributed to the PatternNode. strings \u2013 All strings attributed to the PatternNode. labels \u2013 Labels of all strings attributed to the PatternNode. scores \u2013 Scores of an attributed pattern applied to the attributed strings. Initialize a PatternNode. Parameters: pattern ( Pattern ) \u2013 A Pattern object attributed to a node.","title":"PatternNode"},{"location":"patternnode_reference/#utils.PatternNode.get_labels","text":"get_labels () Get PatternNode.labels attribute","title":"get_labels"},{"location":"patternnode_reference/#utils.PatternNode.get_matches","text":"get_matches () Get PatternNode.matches attribute","title":"get_matches"},{"location":"patternnode_reference/#utils.PatternNode.get_pattern","text":"get_pattern () Get PatternNode.pattern attribute","title":"get_pattern"},{"location":"patternnode_reference/#utils.PatternNode.get_scores","text":"get_scores () Get PatternNode.scores attribute","title":"get_scores"},{"location":"patternnode_reference/#utils.PatternNode.get_strings","text":"get_strings () Get PatternNode.strings attribute","title":"get_strings"},{"location":"patternnode_reference/#utils.PatternNode.set_labels","text":"set_labels ( labels ) Set PatternNode.labels attribute","title":"set_labels"},{"location":"patternnode_reference/#utils.PatternNode.set_matches","text":"set_matches ( matches ) Set PatternNode.matches attribute","title":"set_matches"},{"location":"patternnode_reference/#utils.PatternNode.set_pattern","text":"set_pattern ( pattern ) Set PatternNode.pattern attribute","title":"set_pattern"},{"location":"patternnode_reference/#utils.PatternNode.set_scores","text":"set_scores ( scores ) Set PatternNode.scores attribute","title":"set_scores"},{"location":"patternnode_reference/#utils.PatternNode.set_strings","text":"set_strings ( strings ) Set PatternNode.strings attribute","title":"set_strings"},{"location":"stringtree_reference/","text":"StringTree StringTree () A class for binary classification of strings with regular expressions. Each node is an instance of the PatternNode class. It contains a regular expression and metadata. Attributes: root ( PatternNode ) \u2013 The root PatternNode. leaves ( list [ PatternNode ] ) \u2013 List of all nodes. Initialize a StringTree object. build build ( strings , labels , min_precision = 0.5 , min_token_length = 1 , max_patterns = None , min_matches_leaf = 1 , min_strings_leaf = 1 , verbose = False , ) Build a StringTree. For the StringTree object being used, create nodes and corresponding patterns. Use provided strings and labels. Parameters: strings ( list [ str ] ) \u2013 List of strings. labels ( list [ int ] ) \u2013 List of labels (0 or 1). min_precision ( float , default: 0.5 ) \u2013 The minimal precision of a pattern in the tree. min_token_length ( int , default: 1 ) \u2013 The initial length of the pattern. max_patterns ( int , default: None ) \u2013 The highest amount of patterns. Once the method finds more, it stops. min_matches_leaf ( int , default: 1 ) \u2013 The minimal amount of matches in one node. min_strings_leaf ( int , default: 1 ) \u2013 The minimal amount of strings in one node. verbose ( bool , default: False ) \u2013 If to provide additinal text output. filter filter ( strings , return_nodes = False ) Return strings matching the tree and corresponding nodes. A string matches a tree if it matches at least one node. Parameters: strings ( list [ str ] ) \u2013 List of strings. return_nodes ( bool , default: False ) \u2013 Flag indicating if to return nodes corresponding to the matched strings. If False, only matched strings are returned. Returns: matches ( list [ int ] ) \u2013 List containing matching strings. matched_nodes ( list [ PatternNode ] ) \u2013 List consisting of PatternNodes of matching strings. Returned only if return_nodes is True. get_leaves get_leaves () Get leaves attribute. match match ( strings , return_nodes = False ) Return flags indicating if strings match the tree. A string matches a tree if it matches at least one node. Parameters: strings ( list [ str ] ) \u2013 List of strings. return_nodes ( bool , default: False ) \u2013 Flag indicating if to return nodes corresponding to the matched strings. If False, only matched strings are returned. Returns: matches ( list [ int ] ) \u2013 List containing 1 (match) and 0 (no match) for each string. matched_nodes ( list [ PatternNode ] ) \u2013 List consisting of PatternNodes of matching strings. Returned only if return_nodes is True. precision_score precision_score ( strings , labels ) Calculate a precision score for given strings and labels. recall_score recall_score ( strings , labels ) Calculate a recall score for given strings and labels. set_leaves set_leaves ( leaves ) Set leaves attribute.","title":"StringTree"},{"location":"stringtree_reference/#utils.StringTree","text":"StringTree () A class for binary classification of strings with regular expressions. Each node is an instance of the PatternNode class. It contains a regular expression and metadata. Attributes: root ( PatternNode ) \u2013 The root PatternNode. leaves ( list [ PatternNode ] ) \u2013 List of all nodes. Initialize a StringTree object.","title":"StringTree"},{"location":"stringtree_reference/#utils.StringTree.build","text":"build ( strings , labels , min_precision = 0.5 , min_token_length = 1 , max_patterns = None , min_matches_leaf = 1 , min_strings_leaf = 1 , verbose = False , ) Build a StringTree. For the StringTree object being used, create nodes and corresponding patterns. Use provided strings and labels. Parameters: strings ( list [ str ] ) \u2013 List of strings. labels ( list [ int ] ) \u2013 List of labels (0 or 1). min_precision ( float , default: 0.5 ) \u2013 The minimal precision of a pattern in the tree. min_token_length ( int , default: 1 ) \u2013 The initial length of the pattern. max_patterns ( int , default: None ) \u2013 The highest amount of patterns. Once the method finds more, it stops. min_matches_leaf ( int , default: 1 ) \u2013 The minimal amount of matches in one node. min_strings_leaf ( int , default: 1 ) \u2013 The minimal amount of strings in one node. verbose ( bool , default: False ) \u2013 If to provide additinal text output.","title":"build"},{"location":"stringtree_reference/#utils.StringTree.filter","text":"filter ( strings , return_nodes = False ) Return strings matching the tree and corresponding nodes. A string matches a tree if it matches at least one node. Parameters: strings ( list [ str ] ) \u2013 List of strings. return_nodes ( bool , default: False ) \u2013 Flag indicating if to return nodes corresponding to the matched strings. If False, only matched strings are returned. Returns: matches ( list [ int ] ) \u2013 List containing matching strings. matched_nodes ( list [ PatternNode ] ) \u2013 List consisting of PatternNodes of matching strings. Returned only if return_nodes is True.","title":"filter"},{"location":"stringtree_reference/#utils.StringTree.get_leaves","text":"get_leaves () Get leaves attribute.","title":"get_leaves"},{"location":"stringtree_reference/#utils.StringTree.match","text":"match ( strings , return_nodes = False ) Return flags indicating if strings match the tree. A string matches a tree if it matches at least one node. Parameters: strings ( list [ str ] ) \u2013 List of strings. return_nodes ( bool , default: False ) \u2013 Flag indicating if to return nodes corresponding to the matched strings. If False, only matched strings are returned. Returns: matches ( list [ int ] ) \u2013 List containing 1 (match) and 0 (no match) for each string. matched_nodes ( list [ PatternNode ] ) \u2013 List consisting of PatternNodes of matching strings. Returned only if return_nodes is True.","title":"match"},{"location":"stringtree_reference/#utils.StringTree.precision_score","text":"precision_score ( strings , labels ) Calculate a precision score for given strings and labels.","title":"precision_score"},{"location":"stringtree_reference/#utils.StringTree.recall_score","text":"recall_score ( strings , labels ) Calculate a recall score for given strings and labels.","title":"recall_score"},{"location":"stringtree_reference/#utils.StringTree.set_leaves","text":"set_leaves ( leaves ) Set leaves attribute.","title":"set_leaves"}]}